#!groovy
println("** Configuring preseed job")
final JOB_NAME = 'preseed-job'

final JOB_COMMANDS = '''
job ('seed-job'){
    description('This job is generated by DSL plugin. Do not touch please.')

    triggers {
        bitbucketPush()
        scm('H/30 * * * *')
    }

    logRotator {
        daysToKeep(30)
        numToKeep(16)
    }

    scm {
        git {
            remote {
                name('origin')
                url('{{ jenkins_seed_git_repo }}')
            }
            branch('{{ jenkins_seed_git_branch }}')
        }
    }

    steps {
        dsl {
            removeAction('DELETE')
            removeViewAction('DELETE')
            external('jobs/*.groovy')
        }
    }
}

queue('seed-job')
'''

import hudson.model.Cause
import hudson.model.FreeStyleProject
import jenkins.model.Jenkins
import javaposse.jobdsl.plugin.ExecuteDslScripts

def jenkins = Jenkins.instance

// Get the job to work with
def job = jenkins.getItem(JOB_NAME)
if(!job)
{
    // The job does not yet exist. Create it.
    job = new FreeStyleProject(jenkins, JOB_NAME)
}

// Basiscconfiguration for the job
job.setDisplayName('Preseeding job')
job.setDescription('''This job will seed the jenkins instance by downloading job-dsl scripts from a git.''')

// Set the log rotator
job.logRotator = new hudson.tasks.LogRotator(-1, 10, -1, 10)

// Clean out all old buildsteps
job.buildersList.clear()

// Put in out new buildstep
step = new ExecuteDslScripts(JOB_COMMANDS)
job.buildersList.add(step)

// Save changes to job
job.save()
jenkins.reload()

// schedule the job
jenkins.getQueue().schedule(job)
